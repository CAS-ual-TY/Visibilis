package de.cas_ual_ty.mundusmagicus.magic;

import java.util.ArrayList;

import de.cas_ual_ty.mundusmagicus.MundusMagicus;

public class NodeField
{
	/**
	 * The parent node of this node field
	 * @see de.cas_ual_ty.mundusmagicus.magic.Node
	 */
	public final Node node;
	
	/**
	 * The data type of this node field
	 * @see de.cas_ual_ty.mundusmagicus.magic.EnumDataType
	 */
	public final EnumMagicDataType dataType;
	
	/**
	 * true: This is an output field | false: This is an input field
	 */
	public final boolean isOutput;
	
	/**
	 * All node fields this is connected to
	 */
	private final ArrayList<NodeField> connections;
	
	public NodeField(Node node, EnumMagicDataType dataType, boolean isOutput)
	{
		this.node = node;
		this.dataType = dataType;
		this.connections = new ArrayList<NodeField>();
		this.isOutput = isOutput;
	}
	
	/**
	 * Check if this node field can connect to another node field.
	 * {@link #isOutput} must not be equal, {@link #dataType} must be equal.
	 * @param field the other node field
	 * @return true, if both node fields can be connected
	 */
	public boolean canConnectTo(NodeField field)
	{
		return field != this && field.isOutput != this.isOutput && field.dataType == this.dataType;
	}
	
	/**
	 * Try to connect this node field to another node field
	 * @param field the other node field
	 * @return true, if both node fields have been connected or were already connected
	 */
	public boolean tryConnectTo(NodeField field)
	{
		if(this.canConnectTo(field))
		{
			this.setConnectionTo(field);
			return true;
		}
		
		return false;
	}
	
	/**
	 * Try to connect this node field to another node field
	 * @param field the other node field
	 * @return true, if both node fields have been connected and were not already connected
	 */
	private boolean setConnectionTo(NodeField field)
	{
		if(!this.connections.contains(field))
		{
			this.connections.add(field);
			
			if(!field.connections.contains(this))
			{
				field.connections.add(this);
			}
			else
			{
				MundusMagicus.warn("[001] NodeField connection was already existent, but onesided!");
			}
			
			return true;
		}
		else if(!field.connections.contains(this))
		{
			field.connections.add(this);
			
			MundusMagicus.warn("[002] NodeField connection was already existent, but onesided!");
			return true;
		}
		
		return false;
	}
	
	/**
	 * Get the currently stored value
	 * @param <A>
	 * @return
	 */
	public <A> A getValue()
	{
		return null;
	}
}
